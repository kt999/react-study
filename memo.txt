<< 20.03.29 공부일지 >>

- react는 따로 돌아간다 (php, nodejs에서의 html파일과는 다르게)
Q. 리액트와 nodejs를 연동하는 것 -> 우선 리액트 기초를 공부하고 nodejs와 연동시키는 법 공부하면 될 듯
-> 기본 컨셉은 그냥 하나의 머신에 두개의 프로그램을 띄우는 것!!

- html코드에 리액트로 짠 코드를 삽입시킴
Q. 리액트와 html, css의 연관성 -> 데이터가 변하는부분만 react로 관리하는지 아니면 전체코드를 리액트에서 짜는지


#2 JSX & Props

- 컴포넌트 : html을 반환하는 함수
-> html의 class나 id에 넣을수도있고, 코드안에다가 직접 <Test /> 요로케 JSX문법(대문자 필수)을 지켜서 넣을 수도 있음
-> 이보다 더 멋진거는 데이터도 같이 넘겨줄 수 있다는거임!! (프로퍼티(props) 개념) 재사용 미쳤다

이제 이 배열들을 자동으로 반복해서 뿌려주는거를 mapping이라함 (map은 자바스크립트 문법인듯)
-> 요건 자바스크립트 map함수부분을 학습해야할 듯

Q. 컴포넌트에 data를 뿌릴때 key값을 안주면 콘솔로그에서 에러가나는데 반드시 줘야하는것인가!? ("key"라는 변수는 사용할수없음)

이제 프로퍼티를 체크하는 것! -> good

#3 State

- function 컴포넌트 -> class 컴포넌트로 변환

- function 컴포넌트가 더 쉬웠는데 왜 굳이 바꾸나?? => "State"를 쓸수있어서! (변하는 데이터를 쓸 때) -> state가 필요없으면 굳이 class를 쓰지않아도 된다는 소리!!

react에서 onClick 함수를쓸때 약간다름 this.add()가 아니라 this.add임 ()는 즉시실행됨을 나타냄
와우 state값을 직접변경해도 화면에 안나타남. 왜냐하면 class에서 render함수를 refresh해주지 않기때문
-> 그래서 setState를 이용해서 값들을 변경시켜줌 (setState를 할때마다 render함수가 refresh 됨)

- Life cycle

라이프사이클로 다양한 기능들을 구현할 수 있을듯. 정말 모던하고 멋지네! 그리고 state에서 초기값들을 선언해주는건 필수는아님.
미래에 무슨 데이터들을 쓸지를 정해놓는건데 좋은 습관이 될듯.

#4 Fetch & rendering 등

ES6문법을 공부를 좀 해야할듯!
Fetch대신에 axios란 모듈을 사용함

- 스타일링

잠깐만 JSX문법으로 거의 똑같이 html코드를 쓸 수 있다면, css적용도 그냥 파일 불러오면 끝이자너?!?!
그러면 거의 끝난거 아닌가?! 이제 페이지 전환같은 기술만 공부하면 바로 내 프로젝트에 적용가능할듯?!
#Routing Bonus까지듣고 다른걸로 넘어가자!


#Routing Bonus

뭔가 느낌이 나오고있음. 리액트따로 api서버따로 띄우고, 라우팅처리를 리액트에서도 할수가있음!!!
기본적으로 리액트에서의 라우팅은 그 경로에있는 모든 컴포넌트를 랜더링함 개신기하네!
-> <Route>에 exact = {ture}만 추가해주면 해결!!

- 리액트에선 a태그를 쓰는대신에 Link란걸 임폴트해서 쓰기 ㄱ.ㄱ (라우터태그 안에서만 사용가능)

그리고 라우팅하면서 Sharing Props를 해줄수있음!! ㅈㄴ머싯당
-> Link태그에서 데이터를 보낼 수 있음!

와 라우팅까지 다나오네! 이걸로만 왠만한 리액트서비스 만들 수 있을듯!!!!
리액트에서 그냥 get방식의 fetch말고 post등의 ajax쏘는 것도 학습해야할듯


#redux

현재까지의 리액트는 한 화면을 나갔다오면 상태가 저장이되어있지않아서 다시 로딩을 해야하는데, redux를 이용하면 state를 저장시켜둘 수 있음 -> redux까지 학습 ㄱ.ㄱ (local state -> global state)













